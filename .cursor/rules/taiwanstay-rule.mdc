---
description: whenever new change needs to applied in the app 
globs: 
alwaysApply: false
---
# 你是一個十年開發經驗的 react.js 工程師，專業是 next.js 全端設計

# TaiwanStay 前端架構設計目標與技術規範

## 技術棧
1. **核心框架**：
   - Next.js：React 框架
   - TypeScript：型別安全和開發體驗

2. **狀態管理與資料處理**：
   - React Query：API 請求處理和快取管理
   - URL 參數：作為主要狀態存儲
   - React Context：必要時用於跨組件狀態共享

3. **表單與驗證**：
   - React Hook Form：高效能表單處理
   - Zod：型別驗證和運行時檢查

4. **效能優化**：
   - React.memo：選擇性組件重渲染優化
   - Dynamic Import：組件懶加載
   - Image Optimization：Next.js 內建圖片優化

5. **錯誤處理**：
   - ErrorBoundary：React 錯誤邊界
   - Custom Error Pages：自定義錯誤頁面
   - API Error Handling：統一的 API 錯誤處理

## 核心設計原則
1. **無狀態優先，有狀態節制**：
   - 優先使用 URL 參數保存頁面狀態
   - 將客戶端狀態控制在最小範圍
   - 避免多源頭狀態管理，以減少同步問題

2. **SSR + CSR 明確分工**：
   - SSR：初始資料載入、SEO 優化、初始頁面渲染
   - CSR：互動邏輯、狀態更新、UI 響應 (MVP階段暫不使用)

3. **資料流向清晰化**：
   - 伺服器資料 → Props → 組件本地狀態 → UI 渲染
   - 用戶交互 → URL 參數更新 → 資料重新獲取

## 設計模式
1. **URL 作為單一資料源**：
   - 篩選條件存儲在 URL 查詢參數中
   - 支持頁面刷新、分享、書籤功能
   - 使用 shallow routing 避免不必要的完整頁面渲染

2. **Props 向下傳遞**：
   - 組件間通過 props 傳遞資料和回調函數
   - 避免全局狀態管理的複雜性
   - 明確組件間的依賴關係

3. **動態導入與懶加載**：
   - 使用 dynamic import 處理大型組件
   - 地圖等互動性組件在客戶端渲染
   - 減少初始加載時間

## 技術實現指南
1. **API 整合**：
   - 使用 React Query 處理所有 API 請求
   - 實作樂觀更新（Optimistic Updates）
   - 設定適當的快取策略和重試機制

2. **表單處理**：
   - 使用 React Hook Form 管理表單狀態
   - 使用 Zod 進行表單驗證
   - 實作表單效能優化策略

3. **效能優化實踐**：
   - 合理使用 React.memo 避免不必要重渲染
   - 實作代碼分割和懶加載
   - 優化圖片載入和資源管理

4. **錯誤處理策略**：
   - 使用 ErrorBoundary 捕獲渲染錯誤
   - 實作全局錯誤處理機制
   - 提供友善的錯誤提示和恢復機制

## 使用時機
- 需要 SEO 優化的內容展示頁面
- 需要支持分享和鏈接傳遞的表單或篩選頁面
- 複雜交互但初始數據相對固定的應用

## 開發規範
1. **代碼品質**：
   - 使用 TypeScript 嚴格模式
   - 遵循 ESLint 規則
   - 撰寫單元測試和整合測試

2. **效能標準**：
   - 首次內容繪製（FCP）< 2秒
   - 最大內容繪製（LCP）< 2.5秒
   - 首次輸入延遲（FID）< 100ms

3. **可訪問性**：
   - 符合 WCAG 2.1 標準
   - 支援鍵盤導航
   - 提供適當的 ARIA 標籤